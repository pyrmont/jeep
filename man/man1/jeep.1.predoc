---
Title: JEEP(1)
Date: 2025/09/27
Authors: Michael Camilleri <mike@inqk.net>
Project: Jeep
Version: DEVEL
---

NAME
====

**jeep** - a Janet bundle manager

SYNOPSIS
========

**jeep** [**-l** | **--local**] _command_ _arguments_

DESCRIPTION
===========

**jeep** is a bundle management and distribution tool for the Janet programming
language. An invocation of **jeep** consists of ``jeep`` followed by a command.

Options
-------

- **-l**, **--local**:
  Sets the __syspath__ to `./_system`. By default, **jeep** performs operations in
  respect of the global syspath. By using **--local**, a user sets the
  syspath to `./_system`, the local syspath.

Individual commands may support additional options. These are written *after*
the command.

Commands
--------

The **jeep** utility comes with multiple commands. More information about each
command can be obtained by running ``jeep help <command>``.

Global commands are commands that a user can run inside or outside of a bundle
directory.

- ***install*** - installs a Janet bundle
- ***list*** - lists installed Janet bundles
- ***quickbin*** - creates a binary executable
- ***uninstall*** - uninstalls a Janet bundle

Bundle commands are commands that a user must run inside a bundle directory.

- ***api*** - generates an API document for a bundle
- ***build*** - builds the native targets of a bundle
- ***clean*** - cleans directories in a bundle
- ***dep*** - adds or removes dependencies from a bundle
- ***prep*** - prepares dependencies for a bundle
- ***test*** - runs tests for a bundle

CONCEPTS
========

Bundles are the distributable units of code in Janet. They are akin to packages
in other languages.

A bundle in Janet is a directory of files. A valid bundle contains an __info
file__ and a __bundle script__. A bundle author can write functions that are
registered to a __bundle hook__ that is called during the bundle life cycle.

For historical reasons, Janet's community includes __modern bundles__ and
__legacy bundles__. Jeep fully supports modern bundles. It only supports the
listing and uninstallation of legacy bundles.

Bundle Script
-------------

The __bundle script__ may be located at:

- `./bundle/init.janet`
- `./bundle.janet`

Bundle Hooks
------------

Janet's __bundle hooks__ are functions called during the bundle life cycle. The
bundle life cycle consists of an install phase and an uninstall phase. In the
install phase, the following hooks are called:

- dependencies
- clean
- build
- install
- check

In the uninstall phase:

- uninstall

A user binds a function to a bundle hook by providing a function with the
same name in the __bundle script__. In other words, to bind to the check
bundle hook, the user would write this in the bundle script:

````
(defn check [manifest]
  (each file (get-in manifest [:info :source :files])
    (perform-a-check file))
  (print "all files checked"))
````

Every bundle hook receives the bundle manifest as its first argument. The
bundle manifest is a table that contains information related to the bundle. For
bundle authors, the most relevant piece of information is under the ``:info``
key. The value is a table that contains the information in the __info file__.

Info File
---------

The __info file__ may be located at:

- `./bundle/info.jdn`
- `./info.jdn`

Legacy Bundles
--------------

A __legacy bundle__ is a directory that contains a __project file__. It is
possible for a bundle to be both a legacy bundle and a __modern bundle__.

Modern Bundles
--------------

A __modern bundle__ is a directory that contains an __info file__ and a __bundle
script__. It is possible for a bundle to be both a __legacy bundle__ and a
modern bundle.

Project File
------------

The __project file__ is a file located at `./project.janet`. It was introduced
by JPM, the Janet Project Manager. It is supported by Janet-PM, the
next-generation project manager that is part of the Spork library. It is not
supported by Jeep.

syspath
-------

The __syspath__ is a directory on the system that Janet uses for loading and
installing. In the Jeep documentation, a distinction is made between the global
syspath and the local syspath relative to a bundle.

The global syspath is normally set to the value of `JANET_PATH`. If
`JANET_PATH` is not set, the global syspath may be set to a value baked in at
compile-time (on POSIX) or nothing (on Windows).

The local syspath relative to the root of the bundle is the `./_system`
directory.

EXAMPLES
========

To install a bundle from a remote URL:

````
$ jeep install https://example.org/foo
````

To install a bundle from a remote URL to the local syspath:

````
$ jeep -l install https://example.org/foo
````

BUGS
====

Report issues at <https://github.com/pyrmont/jeep>
