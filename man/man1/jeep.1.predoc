---
Title: JEEP(1)
Date: 2025/09/12
Authors: Michael Camilleri <mike@inqk.net>
Project: Jeep
Version: DEVEL
---

NAME
====

**jeep** - a Janet bundle manager

SYNOPSIS
========

**jeep** [**-l** | **--local**] _command_ _arguments_

DESCRIPTION
===========

**jeep** is a bundle management and distribution tool for the Janet programming
language. An invocation of **jeep** consists of ``jeep`` followed by a command.

Options
-------

- **-l**, **--local**:
  Sets the __sysroot__ to `./_system`. By default, **jeep** performs operations in
  respect of the global sysroot. By using **--local**, a user sets the
  __sysroot__ to the `./_system` directory.

Individual commands may support additional options. These are written *after*
the command.

Commands
--------

The **jeep** utility comes with multiple commands. More information about each
command can be obtained by running ``jeep help <command>``.

Global commands are commands that a user can run inside or outside of a project
directory.

- **install** - installs a Janet bundle
- **quickbin** - creates a binary executable
- **uninstall** - uninstalls a Janet bundle

Project commands are commands that a user must run inside a project directory.

- **build** - builds the native targets of a project
- **clean** - cleans directories in a project
- **dep** - adds or removes dependencies from a project
- **prep** - prepares dependencies for a project
- **test** - runs tests for a project

CONCEPTS
========

Bundles are the distributable units of code in Janet. They are akin to packages
in other languages.

A bundle in Janet is a collection of files. A valid bundle contains an __info
file__ and a __bundle script__. A bundle author can write functions that are
registered to a __bundle hook__ that is called during the bundle life cycle.

Info File
---------

The __info file__ may be located at:

- `./bundle/info.jdn`
- `./info.jdn`

Bundle Script
-------------

The __bundle script__ may be located at:

- `./bundle/init.janet`
- `./bundle.janet`

Bundle Hooks
------------

The bundle life cycle consists of an install phase and an uninstall phase. In
the install phase, the following hooks are called:

- dependencies
- clean
- build
- install
- check

In the uninstall phase:

- uninstall

A user binds a function to a __bundle hook__ by providing a function with the
same name in the __bundle script__. In other words, to bind to the check
__bundle hook__, the user would write this in the __bundle script__:

````
(defn check [manifest]
  (each file (get-in manifest [:info :source :files])
    (perform-a-check file))
  (print "all files checked"))
````

Every __bundle hook__ receives the bundle manifest as its first argument. The
bundle manifest is a table that contains information related to the bundle. For
project authors, the most relevant piece of information is under the ``:info``
key. The value is a table that contains the information in the __info file__.

sysroot
-------

The __sysroot__ is a directory on the system that Janet uses for loading and
installing. In the Jeep documentation, a distinction is made between the global
sysroot and the local sysroot relative to a project.

The global sysroot is normally set to the value of `JANET_PATH`. If
`JANET_PATH` is not set, the global sysroot may be set to a value baked in at
compile-time (on POSIX) or nothing (on Windows).

The local sysroot relative to a project is the `./_system` directory in the root
of a project.

EXAMPLES
========

To install a bundle from a remote URL:

````
$ jeep install https://example.org/foo
````

To install a bundle from a remote URL to the local sysroot directory:

````
$ jeep -l install https://example.org/foo
````

BUGS
====

Report issues at <https://github.com/pyrmont/jeep>
